{"version":3,"sources":["component/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["todoData","require","ToDoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showModal","data","setState","visible","modelImg","img","modelTime","time","console","log","JSON","stringify","handleOk","e","handleCancel","componentDidMount","s","Date","date","getTime","Math","floor","state","msg","_this2","react_default","a","createElement","style","padding","maxWidth","margin","marginBottom","color","listStyle","map","v","k","iconColor","isPointer","isPointEvents","done","key","pointerEvents","cursor","onClick","bind","className","aria-hidden","xlinkHref","toDo","modal","footer","closable","onOk","onCancel","width","src","React","Component","App","component_ToDoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4MAIMA,EAAYC,EAAQ,IA6FXC,cAzFX,SAAAA,EAAYC,GAAM,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACdE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAUdQ,UAAY,SAACC,GACTR,EAAKS,SAAS,CACZC,SAAS,EACTC,SAASH,EAAKI,IACdC,UAAUL,EAAKM,OAEjBC,QAAQC,IAAIC,KAAKC,UAAUV,KAjBTR,EAoBpBmB,SAAW,SAACC,GACVL,QAAQC,IAAII,GACZpB,EAAKS,SAAS,CACZC,SAAS,KAvBOV,EA2BpBqB,aAAe,SAACD,GACdL,QAAQC,IAAII,GACZpB,EAAKS,SAAS,CACZC,SAAS,KA9BOV,EA8ElBsB,kBAAmB,WACf,IAAIC,EAAI,IAAIC,KAAK,cAEbC,GADI,IAAID,MACCE,UAAUH,EAAEG,UACzBD,EAAOE,KAAKC,MAAMH,EAAI,OACtBzB,EAAKS,SAAS,CACVgB,KAAKA,KAlFTzB,EAAK6B,MAAQ,CACTC,IAAI,GACJtB,KAAKZ,EACL6B,KAAK,GACLf,SAAS,EACTC,SAAS,GACTE,UAAU,IARAb,wEAkCV,IAAA+B,EAAA5B,KACJ,OACI6B,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACC,QAAU,MAAMC,SAAW,QAAQC,OAAS,WACrDN,EAAAC,EAAAC,cAAA,MAAIC,MAAO,CAACI,aAAe,SAA3B,oDAA6CP,EAAAC,EAAAC,cAAA,QAAMC,MAAO,CAACK,MAAQ,YAAarC,KAAK0B,MAAMJ,MAA3F,WACAO,EAAAC,EAAAC,cAAA,MAAIC,MAAO,CAACM,UAAY,SAGhBtC,KAAK0B,MAAMrB,KAAKkC,IAAI,SAACC,EAAEC,GACnB,IAAIC,EAAWC,EAAY,GACvBC,EAAgB,OAOpB,OALGJ,EAAEK,OACDH,EAAY,UACZC,EAAY,UACZC,EAAgB,IAGhBf,EAAAC,EAAAC,cAAA,MAAIe,IAAOL,EAAGT,MAAO,CAACe,cAAgBH,EAAcI,OAASL,GAAYM,QAASrB,EAAKxB,UAAU8C,KAAKtB,EAAKY,IACvGX,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAACK,MAAQK,GAAYS,UAAU,OAAOC,cAAY,QAC9DvB,EAAAC,EAAAC,cAAA,OAAKsB,UAAU,iBAEdb,EAAEc,SAMvBzB,EAAAC,EAAAC,cAAAwB,EAAA,GAEAC,OAAQ,KACRjD,QAASP,KAAK0B,MAAMnB,QACpBkD,UAAU,EACVC,KAAM1D,KAAKgB,SACX2C,SAAU3D,KAAKkB,cAEfW,EAAAC,EAAAC,cAAA,OAAKC,MAAO,CAAC4B,MAAQ,QAASC,IAAK7D,KAAK0B,MAAMlB,UAAY,KAC1DqB,EAAAC,EAAAC,cAAA,SAAI/B,KAAK0B,MAAMhB,kEAvERoD,IAAMC,WCOdC,mLARX,OACEnC,EAAAC,EAAAC,cAAA,OAAKoB,UAAU,OACbtB,EAAAC,EAAAC,cAACkC,EAAD,cAJUF,aCQEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAC,EAAAC,cAAC0C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.acda9758.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Modal, Button } from 'antd';\n\nconst todoData  = require('../db/todo.json')\n\n\nclass ToDoList extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            msg:'',\n            data:todoData,\n            date:'',\n            visible: false,\n            modelImg:'',\n            modelTime:''\n        }\n    }\nshowModal = (data) => {\n    this.setState({\n      visible: true,\n      modelImg:data.img,\n      modelTime:data.time,\n    });\n    console.log(JSON.stringify(data))\n  }\n\n  handleOk = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  }\n\n  handleCancel = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  }\n\n    render(){\n        return (\n            <div style={{\"padding\":\"2em\",\"maxWidth\":\"800px\",\"margin\":\"0 auto\"}}>\n                <h3 style={{\"marginBottom\":\"20px\"}}>记录木木&啊兽相恋<span style={{\"color\":\"#f759ab\"}}>{this.state.date}</span>天 </h3>\n                <ul style={{\"listStyle\":\"none\"}}>\n                    {   \n                        \n                        this.state.data.map((v,k)=>{\n                            let iconColor ,isPointer = ''\n                            let isPointEvents = 'none'\n\n                            if(v.done){\n                                iconColor = \"#f759ab\"\n                                isPointer = \"pointer\"\n                                isPointEvents = ''\n                            }\n                            return (\n                                <li key = {k} style={{\"pointerEvents\":isPointEvents,\"cursor\":isPointer}} onClick={this.showModal.bind(this,v)}>\n                                    <svg style={{\"color\":iconColor}} className=\"icon\" aria-hidden=\"true\">\n                                    <use xlinkHref=\"#icon-aixin\"></use>\n                                    </svg>\n                                    {v.toDo}\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n                <Modal\n                // title=\"Basic Modal\"\n                footer={null}\n                visible={this.state.visible}\n                closable={false}\n                onOk={this.handleOk}\n                onCancel={this.handleCancel}\n                >\n                <img style={{\"width\":\"100%\"}} src={this.state.modelImg || ''}/>\n                <p>{this.state.modelTime}</p>\n                </Modal> \n            </div>\n        )\n    }\n    componentWillMount() {\n        \n    }\n    componentDidMount =()=>{\n        let s = new Date('2015/10/22')\n        let n = new Date();\n        let date = n.getTime()-s.getTime() \n        date = Math.floor(date/(24*3600*1000))\n        this.setState({\n            date:date\n        })\n    }\n}\n\nexport default ToDoList","import React, { Component } from 'react';\nimport './App.css';\n\nimport ToDoList from './component/ToDoList'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ToDoList></ToDoList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}