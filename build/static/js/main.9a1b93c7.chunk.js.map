{"version":3,"sources":["component/ToDoList.jsx","App.js","serviceWorker.js","index.js"],"names":["api","ToDoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","showModal","data","setState","visible","modelTodo","toDo","modelImg","img","modelTime","time","console","log","JSON","stringify","handleOk","e","handleCancel","getData","axios","get","then","response","catch","error","todoData","require","getLoveDate","s","Date","date","getTime","Math","floor","state","msg","_this2","react_default","a","createElement","style","padding","maxWidth","margin","marginBottom","color","listStyle","map","v","k","iconColor","isPointer","isPointEvents","done","key","pointerEvents","cursor","onClick","bind","className","aria-hidden","xlinkHref","divider","dashed","id","modal","footer","bodyStyle","closable","onOk","onCancel","centered","width","src","React","Component","App","component_ToDoList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9a1b93c7.chunk.js","sourcesContent":["import React from 'react'\n\nimport { Modal,Card,Divider } from 'antd';\nimport axios from 'axios'\nimport  '../css/todolist.css'\n// const { Meta } = Card;\n\nconst api = 'https://raw.githubusercontent.com/lppx/muandshou/master/src/db/todo.json'\n\nclass ToDoList extends React.Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            msg:'',\n            data:[],\n            date:'',\n            visible: false,\n            modelTodo:'',\n            modelImg:'',\n            modelTime:''\n        }\n    }\nshowModal = (data) => {\n    this.setState({\n      visible: true,\n      modelTodo:data.toDo,\n      modelImg:data.img,\n      modelTime:data.time,\n    });\n    console.log(JSON.stringify(data))\n  }\n  handleOk = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  }\n\n  handleCancel = (e) => {\n    console.log(e);\n    this.setState({\n      visible: false,\n    });\n  }\n  getData=()=>{\n    axios.get(api)\n    .then((response)=>{\n        // handle success\n        // console.log('lppx:',JSON.stringify(response.data));\n        this.setState({\n            data:response.data\n        })\n    })\n    .catch((error)=>{\n        // handle error\n        console.log('error:',error);\n        const todoData  = require('../db/todo.json')\n        this.setState({\n            data:todoData\n        })\n    })\n    .then(function () {\n        // always executed\n    });\n  }\n\n  getLoveDate=()=>{\n    let s = new Date('2015/10/22 00:00:00')\n    let n = new Date();\n    let date = n.getTime()-s.getTime() \n    date = Math.floor(date/(24*3600*1000))\n    this.setState({\n        date:date\n    })\n  }\n  componentDidMount(){\n    this.getData();\n    this.getLoveDate();\n}\n    render(){\n        return (\n            <div style={{\"padding\":\"2em\",\"maxWidth\":\"800px\",\"margin\":\"0 auto\"}}>\n                <h3 style={{\"marginBottom\":\"20px\"}}>ËÆ∞ÂΩïÊú®Êú®&ÂïäÂÖΩÁõ∏ÊÅã<span style={{\"color\":\"#f759ab\"}}>{this.state.date}</span>Â§© </h3>\n                <ul style={{\"listStyle\":\"none\"}}>\n                    {   \n                        this.state.data.map((v,k)=>{\n                            let iconColor ,isPointer = ''\n                            let isPointEvents = 'none'\n\n                            if(v.done){\n                                iconColor = \"#f759ab\"\n                            }\n                            if (v.img !='') {\n                                isPointer = \"pointer\"\n                                isPointEvents = ''\n                            }\n                            return (\n                                <li key = {k} style={{\"pointerEvents\":isPointEvents,\"cursor\":isPointer}} onClick={this.showModal.bind(this,v)}>\n                                    <svg style={{\"color\":iconColor}} className=\"icon\" aria-hidden=\"true\">\n                                    <use xlinkHref=\"#icon-aixin\"></use> \n                                    </svg>\n                                    <span> </span>\n                                    {v.toDo}\n                                </li>\n                            )\n                        })\n                    }\n                </ul>\n                <Divider dashed />\n                <p>‰Ω†ÊòØÁ¨¨<span id=\"busuanzi_value_site_uv\"></span>‰ΩçÁ•ùÁ¶èËÄÖüíñË∞¢Ë∞¢ÔºÅ</p>\n                <Modal\n                // title=\"Basic Modal\"\n                footer={null}\n                visible={this.state.visible}\n                bodyStyle={{}}\n                closable={false}\n                onOk={this.handleOk}\n                onCancel={this.handleCancel}\n                // destroyOnClose={true}\n                centered={true}\n                >\n                <img style={{\"width\":\"100%\"}} src={this.state.modelImg || ''}/>\n                <div className=\"modeltitle\">{this.state.modelTime}</div>\n                <div className=\"modeldesc\">{this.state.modelTodo}</div>\n                {/* <Card\n                    hoverable\n                    style={{ width: \"100%\" ,border:\"none\",paddingBottom:0}}\n                    cover={<img src={this.state.modelImg || ''} />}\n                >\n                    <Meta\n                    title={this.state.modelTime}\n                    description={this.state.modelTodo}\n                    />\n                </Card> */}\n                </Modal> \n            </div>\n        )\n    }\n    componentWillMount() {\n        \n    }\n    \n}\n\nexport default ToDoList","import React, { Component } from 'react';\nimport './App.css';\n\nimport ToDoList from './component/ToDoList'\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <ToDoList></ToDoList>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}